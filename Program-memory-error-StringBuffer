QUESTION:

Write a program to occur out of memory error using StringBuffer(while doing append) with storing millions of records and how to resolve it with GC and without GC?
Note: Don’t explicitly set perm size. System should take by default.

ANSWER:

Example: Program that causes OutOfMemoryError:

public class OutOfMemoryErrorExample {

    public static void main(String[] args) {
        try {
            StringBuffer sb = new StringBuffer();
            for (int i = 0; i < Integer.MAX_VALUE; i++) {
                sb.append("This is a test string to cause memory leak. Iteration: ").append(i);
            }
        } catch (OutOfMemoryError e) {
            System.out.println("OutOfMemoryError occurred: " + e.getMessage());
            e.printStackTrace();
        }
    }
}

In this code, the StringBuffer continuously appends a string, leading to an OutOfMemoryError eventually because the JVM’s heap gets exhausted.

Option 1: Without Explicit Garbage Collection (GC)

If we don’t want to rely on explicit garbage collection, we should manage the memory usage by writing the data to a file or a database and periodically clearing the StringBuffer. This way, we can handle larger amounts of data without filling up the heap.

Example: Periodically write to file and clear buffer

import java.io.FileWriter;
import java.io.IOException;

public class OutOfMemorySolutionWithoutGC {

    public static void main(String[] args) {
        StringBuffer sb = new StringBuffer();
        int threshold = 10000; // Threshold to write and clear buffer
        try (FileWriter writer = new FileWriter("output.txt")) {
            for (int i = 0; i < Integer.MAX_VALUE; i++) {
                sb.append("This is a test string. Iteration: ").append(i).append("\n");

                // When buffer reaches threshold, write to file and clear the buffer
                if (i % threshold == 0) {
                    writer.write(sb.toString());
                    sb.setLength(0); // Clear buffer to release memory
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        } catch (OutOfMemoryError e) {
            System.out.println("OutOfMemoryError occurred: " + e.getMessage());
        }
    }
}

This solution periodically writes the contents of the StringBuffer to a file and clears the buffer, preventing memory exhaustion.


Option 2: Relying on Garbage Collection

When relying on the default garbage collection, you should minimize object retention and allow the GC to reclaim unused memory. However, the StringBuffer can hold onto memory longer than necessary. You can mitigate this by nullifying references to objects when they are no longer needed.

Example: Allow GC to collect by nullifying references

public class OutOfMemorySolutionWithGC {

    public static void main(String[] args) {
        StringBuffer sb = new StringBuffer();
        int threshold = 10000;

        try {
            for (int i = 0; i < Integer.MAX_VALUE; i++) {
                sb.append("This is a test string. Iteration: ").append(i).append("\n");

                if (i % threshold == 0) {
                    processBuffer(sb.toString());
                    sb.setLength(0); // Clear buffer
                    System.gc(); // Suggest GC (optional)
                }
            }
        } catch (OutOfMemoryError e) {
            System.out.println("OutOfMemoryError occurred: " + e.getMessage());
        }

}

    private static void processBuffer(String data) {
        // Process data, e.g., write to a file, database, etc.
    }
}

DETAILS:
In this example, although we call System.gc() (just a suggestion for GC), we try to mitigate memory issues by clearing the StringBuffer periodically and not retaining unnecessary references, which helps the garbage collector reclaim memory efficiently. 
